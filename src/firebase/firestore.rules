rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // USERS COLLECTION
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['displayName', 'email'])
        && request.resource.data.displayName is string
        && request.resource.data.email is string;
      allow update, delete: if request.auth != null && (
        request.auth.uid == userId || request.auth.token.admin == true
      );
      
      // NOTIFICATIONS SUBCOLLECTION
      match /notifications/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // DRAFTS SUBCOLLECTION
      match /drafts/{draftId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // POSTS COLLECTION
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.resource.data.user.uid == request.auth.uid
        && request.resource.data.keys().hasAll(['text', 'createdAt', 'user', 'likes', 'commentCount'])
        && request.resource.data.likes is list
        && request.resource.data.commentCount is number;
      allow update, delete: if request.auth != null
        && resource.data.user.uid == request.auth.uid;

      // COMMENTS SUBCOLLECTION
      match /comments/{commentId} {
        // Allow authenticated users to read comments
        allow read: if request.auth != null;
        
        // Allow authenticated users to create comments with proper structure
        allow create: if request.auth != null
          && request.resource.data.user.uid == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0;
          
        // Allow users to update/delete their own comments
        allow update, delete: if request.auth != null
          && resource.data.user.uid == request.auth.uid;
        
        // REPLIES SUBCOLLECTION
        match /replies/{replyId} {
          // Allow authenticated users to read replies
          allow read: if request.auth != null;
          
          // Allow authenticated users to create replies with proper structure
          allow create: if request.auth != null
            && request.resource.data.user.uid == request.auth.uid
            && request.resource.data.text is string
            && request.resource.data.text.size() > 0;
            
          // Allow users to update/delete their own replies
          allow update, delete: if request.auth != null
            && resource.data.user.uid == request.auth.uid;
        }
      }
      
      // COMMENT REACTIONS SUBCOLLECTION
      match /commentReactions/{commentId} {
        // Allow authenticated users to read comment reactions
        allow read: if request.auth != null;
        
        // Allow authenticated users to create and update comment reactions
        // Each user can only set their own reaction
        allow create, update: if request.auth != null
          && (request.resource.data[request.auth.uid] is string || !request.resource.data.keys().hasAny([request.auth.uid]));
          
        // Allow users to delete the entire reactions document only if they created the comment
        allow delete: if request.auth != null
          && exists(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId))
          && get(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId)).data.user.uid == request.auth.uid;
      }
    }

    // USERNAMES COLLECTION (for uniqueness)
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && !exists(/databases/$(database)/documents/usernames/$(username));
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.uid;
    }

    // GROUPS COLLECTION
    match /groups/{groupId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.resource.data.keys().hasAll(['name', 'description', 'members'])
        && request.resource.data.name is string
        && request.resource.data.description is string
        && request.resource.data.members is list;
      
      // Allow group members to update the group
      allow update: if request.auth != null && (
        request.auth.token.admin == true ||
        resource.data.members[request.auth.uid] == true ||
        resource.data.createdBy == request.auth.uid
      );
      
      // Only admins or group creators can delete groups
      allow delete: if request.auth != null && (
        request.auth.token.admin == true ||
        resource.data.createdBy == request.auth.uid
      );
      
      // GROUP POSTS SUBCOLLECTION
      match /posts/{postId} {
        allow read: if request.auth != null
          && resource.data.members[request.auth.uid] == true;
        allow create: if request.auth != null
          && get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == true
          && request.resource.data.user.uid == request.auth.uid;
        allow update, delete: if request.auth != null && (
          resource.data.user.uid == request.auth.uid ||
          get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid
        );
      }
    }
    
    // CHATS COLLECTION
    match /chats/{chatId} {
      // Allow read if user is a participant
      allow read: if request.auth != null
        && resource.data.participants[request.auth.uid] == true;
      
      // Allow create if user includes themselves as participant
      allow create: if request.auth != null
        && request.resource.data.participants[request.auth.uid] == true;
      
      // Allow update if user is a participant (for adding new participants)
      allow update: if request.auth != null
        && resource.data.participants[request.auth.uid] == true;
      
      // MESSAGES SUBCOLLECTION
      match /messages/{messageId} {
        allow read: if request.auth != null
          && get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true;
        
        allow create: if request.auth != null
          && get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true
          && request.resource.data.senderId == request.auth.uid;
        
        // Users can only delete their own messages
        allow delete: if request.auth != null
          && resource.data.senderId == request.auth.uid;
      }
    }

    // REPORTS COLLECTION
    match /reports/{reportId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // PUBLIC COLLECTIONS (e.g., for app-wide settings, announcements)
    match /public/{docId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // ACTIVITIES COLLECTION (for user activity feed)
    match /activities/{activityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null
        && resource.data.userId == request.auth.uid;
    }

    // BOOKMARKS COLLECTION
    match /bookmarks/{userId} {
      allow read: if request.auth != null
        && request.auth.uid == userId;
      allow write: if request.auth != null
        && request.auth.uid == userId;
    }

    // REACTIONS COLLECTION (for post reactions)
    match /reactions/{reactionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null
        && resource.data.userId == request.auth.uid;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /posts/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Profile pictures storage rules
    match /users/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 2 * 1024 * 1024 // 2MB file size limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Group images storage rules
    match /groups/{groupId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null
                   && exists(/databases/$(database)/documents/groups/$(groupId))
                   && get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == true
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }
  }
}